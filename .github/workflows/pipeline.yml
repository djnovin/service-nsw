name: CI

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master
    workflow_dispatch:
    schedule:
        - cron: '0 0 * * *'

jobs:
    cache-and-install:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18]

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install

    lint-and-static-analysis:
        needs: cache-and-install
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install pnpm (redundant, but ensures pnpm is available)
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            # This step ensures that the dependencies are present in the node_modules directory
            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Lint the project
              run: pnpm run lint

    test:
        needs: lint-and-static-analysis
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install pnpm (redundant, but ensures pnpm is available)
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run tests
              run: pnpm test

    build-app:
        needs: test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install pnpm (redundant, but ensures pnpm is available)
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build the app
              run: pnpm run build

    provision_azure:
        needs: lint_and_test
        runs-on: ubuntu-latest

        steps:
            - name: Install Azure CLI
              run: |
                  curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Compile Bicep to ARM template
              run: az bicep build --file Dockerfile.bicep

            - name: Deploy Infrastructure using ARM template
              run: az deployment group create --resource-group myResourceGroup --template-file Dockerfile.json
