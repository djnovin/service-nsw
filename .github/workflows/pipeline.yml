name: CI

on:
    push:
        branches:
            - master
    pull_request:
        branches:
            - master
    workflow_dispatch:
    schedule:
        - cron: '0 0 * * *'

env:
    LOCATION: eastus2
    RESOURCE_GROUP: nov

jobs:
    cache-and-install:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18]

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install

    lint-and-static-analysis:
        needs: cache-and-install
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install pnpm (redundant, but ensures pnpm is available)
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            # This step ensures that the dependencies are present in the node_modules directory
            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Lint the project
              run: pnpm run lint

    test:
        needs: lint-and-static-analysis
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install pnpm (redundant, but ensures pnpm is available)
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run tests
              run: pnpm test

    build-app:
        needs: test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install pnpm (redundant, but ensures pnpm is available)
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Cache pnpm modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.pnpm-store
                      ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Build the app
              run: pnpm run build

    provision:
        name: Provision resources
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Ensure resource group exists
              uses: azure/CLI@v1
              with:
                  inlineScript: az group create -g ${{ env.RESOURCE_GROUP }} -l ${{ env.LOCATION }}
            - name: Provision resources
              if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
              uses: azure/arm-deploy@v1
              with:
                  resourceGroupName: ${{ env.RESOURCE_GROUP }}
                  template: ./main.bicep
                  parameters: location=${{ env.LOCATION }}

    deploy:
        name: Deploy
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed') || github.event_name == 'repository_dispatch'
        needs: provision
        strategy:
            matrix:
                app: [web]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Get deployment token
              uses: azure/CLI@v1
              id: swa-token
              with:
                  inlineScript: |
                      SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ env.RESOURCE_GROUP }}-${{ matrix.app }} -o tsv --query properties.apiKey)
                      echo "::add-mask::$SWA_DEPLOYMENT_TOKEN"
                      echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV
            - name: Deploy app
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: 'upload'
                  app_location: apps/${{ matrix.app }}
                  output_location: dist

    undeploy_previews:
        name: Undeploy preview
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        needs: provision
        strategy:
            matrix:
                app: [cms, web]
        runs-on: ubuntu-latest
        steps:
            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Get deployment token
              uses: azure/CLI@v1
              id: swa-token
              with:
                  inlineScript: |
                      SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ env.RESOURCE_GROUP }}-${{ matrix.app }} -o tsv --query properties.apiKey)
                      echo "::add-mask::$SWA_DEPLOYMENT_TOKEN"
                      echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV
            - name: Undeploy app
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
                  action: 'close'
